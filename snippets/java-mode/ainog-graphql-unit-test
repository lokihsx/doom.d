# -*- mode: snippet -*-
# name: ainog-graphql-unit-test
# key:  ainog-graphql-unit-test
# --

package com.ainog.backend.web.admin;

import org.ainog.backend.web.admin.AdminApplication;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import com.graphql.spring.boot.test.GraphQLResponse;
import com.graphql.spring.boot.test.GraphQLTestTemplate;


@SpringBootTest(classes = {AdminApplication.class},
        webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class `(ainog-graphql/module-name)`Tests {
    @Autowired
    GraphQLTestTemplate graphQLTestTemplate;

    private final String location = "graphql-test/`(ainog-graphql/module-name-camel)`/";
    private final String fragmentLocation = "graphql-test/fragments/";

    private final List<String> fragments =
            Arrays.asList(fragmentLocation + "`(ainog-graphql/module-name-camel)`Fragment.graphql");

    @Test
    @Order(1)
    public void adminLoginTest() throws IOException {
        AdminLoginTestUtils.adminLoginTest(graphQLTestTemplate);
    }

    @Test
    @Order(100)
    public void save`(ainog-graphql/module-name)`s() throws IOException {
        String methodName = Thread.currentThread() .getStackTrace()[1].getMethodName();
        String filename = location + methodName + ".graphql";

        GraphQLResponse response = graphQLTestTemplate.postForResource(filename, fragments);
        assertNotNull(response);
        assertThat(response.isOk()).isTrue();
        assertThat(response.readTree().hasNonNull("errors")).isFalse();
        assertThat(response.readTree().path("data").isNull()).isFalse();

        // TODO 测试新增和修改是否成功
    }

    @Test
    @Order(110)
    public void `(ainog-graphql/module-name-camel)`s() throws IOException {
        String methodName = Thread.currentThread() .getStackTrace()[1].getMethodName();
        String filename = location + methodName + ".graphql";

        GraphQLResponse response = graphQLTestTemplate.postForResource(filename, fragments);
        assertNotNull(response);
        assertThat(response.isOk()).isTrue();
        assertThat(response.readTree().hasNonNull("errors")).isFalse();
        assertThat(response.readTree().path("data").isNull()).isFalse();

        // TODO 测试获取列表是否正常
    }

    @Test
    @Order(120)
    public void delete`(ainog-graphql/module-name)`s() throws IOException {
        String methodName = Thread.currentThread() .getStackTrace()[1].getMethodName();
        String filename = location + methodName + ".graphql";

        // 删除动作不需要fragments
        GraphQLResponse response = graphQLTestTemplate.postForResource(filename);
        assertNotNull(response);
        assertThat(response.isOk()).isTrue();
        assertThat(response.readTree().hasNonNull("errors")).isFalse();

        // TODO 测试删除的数据是否和id对应
    }

    @Test
    @Order(1001)
    public void adminLogoutTest() throws IOException {
        AdminLoginTestUtils.adminLogoutTest(graphQLTestTemplate);
    }
}